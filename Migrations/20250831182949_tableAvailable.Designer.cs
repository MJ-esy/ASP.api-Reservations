// <auto-generated />
using System;
using ASP_Reservations.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASP_Reservations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250831182949_tableAvailable")]
    partial class tableAvailable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ASP_Reservations.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("ADMIN");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("AdminId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ASP_Reservations.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("GuestNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TableIdFk")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("TableIdFk");

                    b.HasIndex("UserIdFk");

                    b.HasIndex("Status", "TableIdFk", "StartDateTime")
                        .HasFilter("[Status] != 'Cancelled'");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("ASP_Reservations.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<int>("Allergen")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPopular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DishId");

                    b.HasIndex("IsPopular");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            Allergen = 3,
                            Category = 0,
                            Description = "sourdough bread, pickled cucumber trout roe(E,G,L)",
                            DishName = "Skagen Sandwich",
                            IsPopular = true,
                            Price = 175m
                        },
                        new
                        {
                            DishId = 2,
                            Allergen = 3,
                            Category = 0,
                            Description = "sourdough bread, pickled cucumber trout roe (E,G,L)",
                            DishName = "Skagen Sandwich",
                            IsPopular = false,
                            Price = 245m
                        },
                        new
                        {
                            DishId = 3,
                            Allergen = 3,
                            Category = 0,
                            Description = "parmesan grilled sour dough (G,L)",
                            DishName = "Chantarelle toast",
                            IsPopular = true,
                            Price = 160m
                        },
                        new
                        {
                            DishId = 4,
                            Allergen = 3,
                            Category = 0,
                            Description = "pickled red onions, new potatoes (L)",
                            DishName = "Smoked Tiger shrimps",
                            IsPopular = false,
                            Price = 175m
                        },
                        new
                        {
                            DishId = 5,
                            Allergen = 0,
                            Category = 0,
                            Description = "angel fries, parmesan, grilled heart salad",
                            DishName = "Steak Tartare",
                            IsPopular = false,
                            Price = 185m
                        },
                        new
                        {
                            DishId = 6,
                            Allergen = 2,
                            Category = 1,
                            Description = "tuna, egg, capers",
                            DishName = "Nicoise",
                            IsPopular = false,
                            Price = 275m
                        },
                        new
                        {
                            DishId = 7,
                            Allergen = 3,
                            Category = 2,
                            Description = "aioli (E,L)",
                            DishName = "Moules frites",
                            IsPopular = false,
                            Price = 285m
                        },
                        new
                        {
                            DishId = 8,
                            Allergen = 3,
                            Category = 2,
                            Description = "Sandefjord sauce, trout roe, Chantarelles, boiled potatoes (L)",
                            DishName = "Baked Trout",
                            IsPopular = true,
                            Price = 295m
                        },
                        new
                        {
                            DishId = 9,
                            Allergen = 3,
                            Category = 2,
                            Description = "veal, crushed potatoes, red wine sauce, creamy gremolata (E,G,L)",
                            DishName = "Ossobuco",
                            IsPopular = false,
                            Price = 295m
                        },
                        new
                        {
                            DishId = 10,
                            Allergen = 3,
                            Category = 2,
                            Description = "green peppar sauce, French fries, parmesan (L)",
                            DishName = "Pepper Steak",
                            IsPopular = true,
                            Price = 395m
                        },
                        new
                        {
                            DishId = 11,
                            Allergen = 3,
                            Category = 3,
                            Description = "vanilla ice cream (E,L)",
                            DishName = "Apple pie",
                            IsPopular = true,
                            Price = 130m
                        },
                        new
                        {
                            DishId = 12,
                            Allergen = 3,
                            Category = 3,
                            Description = "(E,L)",
                            DishName = "Creme brulee",
                            IsPopular = false,
                            Price = 110m
                        },
                        new
                        {
                            DishId = 13,
                            Allergen = 7,
                            Category = 3,
                            Description = "(E,G,L,N)",
                            DishName = "Chocolate truffle",
                            IsPopular = false,
                            Price = 45m
                        });
                });

            modelBuilder.Entity("ASP_Reservations.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("TableNum")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("Capacity");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Capacity = 2,
                            IsAvailable = true,
                            TableNum = 101
                        },
                        new
                        {
                            TableId = 2,
                            Capacity = 2,
                            IsAvailable = true,
                            TableNum = 102
                        },
                        new
                        {
                            TableId = 3,
                            Capacity = 4,
                            IsAvailable = true,
                            TableNum = 201
                        },
                        new
                        {
                            TableId = 4,
                            Capacity = 4,
                            IsAvailable = true,
                            TableNum = 202
                        },
                        new
                        {
                            TableId = 5,
                            Capacity = 4,
                            IsAvailable = true,
                            TableNum = 203
                        },
                        new
                        {
                            TableId = 6,
                            Capacity = 4,
                            IsAvailable = true,
                            TableNum = 204
                        },
                        new
                        {
                            TableId = 7,
                            Capacity = 8,
                            IsAvailable = true,
                            TableNum = 301
                        });
                });

            modelBuilder.Entity("ASP_Reservations.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("Email", "Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "One@email.com",
                            Name = "Test One",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "Two@email.com",
                            Name = "Test Two",
                            Phone = "234-567-8901"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "Three@email.com",
                            Name = "Test Three",
                            Phone = "345-678-9012"
                        });
                });

            modelBuilder.Entity("ASP_Reservations.Models.Booking", b =>
                {
                    b.HasOne("ASP_Reservations.Models.Table", "Table")
                        .WithMany("Bookings")
                        .HasForeignKey("TableIdFk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Tables");

                    b.HasOne("ASP_Reservations.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Customers");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASP_Reservations.Models.Table", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ASP_Reservations.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
